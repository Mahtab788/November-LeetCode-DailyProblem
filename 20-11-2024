#.2516." Take K of each character from left and right"

import java.util.HashMap;

class Solution {
    public int takeCharacters(String s, int k) {
        if (k == 0) return 0;

        // Step 1: Count total occurrences of 'a', 'b', 'c'
        HashMap<Character, Integer> count = new HashMap<>();
        count.put('a', 0);
        count.put('b', 0);
        count.put('c', 0);

        for (char c : s.toCharArray()) {
            count.put(c, count.get(c) + 1);
        }

        // Step 2: Check if it's possible to collect k of each character
        for (char c : count.keySet()) {
            if (count.get(c) < k) return -1;
        }

        // Step 3: Sliding window to maximize valid window length
        int n = s.length();
        int left = 0, maxWindow = 0;
        HashMap<Character, Integer> windowCount = new HashMap<>();
        windowCount.put('a', 0);
        windowCount.put('b', 0);
        windowCount.put('c', 0);

        for (int right = 0; right < n; right++) {
            char c = s.charAt(right);
            windowCount.put(c, windowCount.get(c) + 1);

            // Shrink the window if the window's size exceeds what's allowed
            while (windowCount.get('a') > count.get('a') - k ||
                   windowCount.get('b') > count.get('b') - k ||
                   windowCount.get('c') > count.get('c') - k) {
                char leftChar = s.charAt(left);
                windowCount.put(leftChar, windowCount.get(leftChar) - 1);
                left++;
            }

            // Update maxWindow size
            maxWindow = Math.max(maxWindow, right - left + 1);
        }

        // Step 4: Minimum characters to remove = total length - maxWindow
        return n - maxWindow;
    }
}
