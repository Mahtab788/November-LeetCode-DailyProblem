#2290. Minimum Obstacle Removal to Reach Corner.

import java.util.*;

public class Solution {
    public int minimumObstacles(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[][] directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        int[][] dist = new int[m][n];
        for (int[] row : dist) Arrays.fill(row, Integer.MAX_VALUE);
        dist[0][0] = 0;

        // Priority queue stores [row, col, obstacle count] with obstacle count as the priority
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[2]));
        pq.offer(new int[]{0, 0, 0});

        while (!pq.isEmpty()) {
            int[] current = pq.poll();
            int row = current[0], col = current[1], obstacle = current[2];

            if (row == m - 1 && col == n - 1) return obstacle; // Reached target

            for (int[] dir : directions) {
                int newRow = row + dir[0], newCol = col + dir[1];

                if (newRow >= 0 && newRow < m && newCol >= 0 && newCol < n) {
                    int newObstacle = obstacle + grid[newRow][newCol];
                    if (newObstacle < dist[newRow][newCol]) {
                        dist[newRow][newCol] = newObstacle;
                        pq.offer(new int[]{newRow, newCol, newObstacle});
                    }
                }
            }
        }
        return -1; // Shouldn't reach here
    }
}
