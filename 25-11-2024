#773."Sliding Puzzle"

import java.util.*;

class Solution {
    public int slidingPuzzle(int[][] board) {
        String target = "123450";
        String start = Arrays.deepToString(board).replaceAll("[^0-5]", "");
        
        // Define neighbors based on the 2x3 grid
        int[][] neighbors = {
            {1, 3},       // index 0
            {0, 2, 4},    // index 1
            {1, 5},       // index 2
            {0, 4},       // index 3
            {1, 3, 5},    // index 4
            {2, 4}        // index 5
        };
        
        // BFS setup
        Queue<String> queue = new LinkedList<>();
        Set<String> visited = new HashSet<>();
        queue.offer(start);
        visited.add(start);
        
        int moves = 0;
        
        while (!queue.isEmpty()) {
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                String current = queue.poll();
                
                if (current.equals(target)) return moves;
                
                int zeroIndex = current.indexOf('0');
                for (int neighbor : neighbors[zeroIndex]) {
                    String nextState = swap(current, zeroIndex, neighbor);
                    if (!visited.contains(nextState)) {
                        visited.add(nextState);
                        queue.offer(nextState);
                    }
                }
            }
            moves++;
        }
        
        return -1; // No solution found
    }
    
    // Helper function to swap characters in a string
    private String swap(String str, int i, int j) {
        char[] arr = str.toCharArray();
        char temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
        return new String(arr);
    }
}
